__NUXT_JSONP__("/projects/tictactoe", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o){return {data:[{article:{slug:f,description:"A tic tac toe ai with varying difficultie",title:g,img:"\u002Fimg\u002Ftictactoe.png",alt:"Tic tac toe",link:f,createdAt:"2021-01-10T00:00:00.000Z",toc:[{id:h,depth:2,text:i}],body:{type:"root",children:[{type:b,tag:"h1",props:{id:j},children:[{type:b,tag:k,props:{ariaHidden:l,href:"#tic-tac-toe",tabIndex:m},children:[{type:b,tag:n,props:{className:[o,e]},children:[]}]},{type:a,value:g}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"This project started as a JavaScript exercise and a way to challenge myself to get better at coding \u002F JS. But once I finished the base logic of Tic Tac Toe I had no one to play against so I decided to add a robot to play against."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Tic Tac Toe has 196839 (3^9) possible positions which might sound like a lot of ways to play the game. But for a computer, this number is quite low. It is quite easy to brute force your way through all the possible positions and calculate the best move from there."}]},{type:a,value:c},{type:b,tag:j,props:{},children:[{type:a,value:c}]},{type:a,value:c},{type:b,tag:"h2",props:{id:h},children:[{type:b,tag:k,props:{ariaHidden:l,href:"#but-how",tabIndex:m},children:[{type:b,tag:n,props:{className:[o,e]},children:[]}]},{type:a,value:i}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Using the Minimax algorithm you can search through the entire game tree to look for the best possible move given a certain board position.\nOnce a winning position is reached or all board squares are filled I evaluate the board and assign it a score. If the position is winning for the computer it gets a score of +1, if the position is winning for the human it gets a score of -1 and if the game is a draw it gets a score of 0. After having looked through all the possible positions it picks the move with the highest chance of winning."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Later I updated this project to include alpha-beta pruning. Once fully implemented this sped up the search for the best move by about 10 times, which is truly crazy. Alpha-beta pruning works by not having to examine game positions that are determined to be worse than a previously looked at move."}]},{type:a,value:c},{type:b,tag:e,props:{href:"https:\u002F\u002Fgithub.com\u002FVuurvos1\u002Ftictactoe",target:"_blank",icon:"github"},children:[{type:a,value:"\nSource code\n"}]}]},dir:"\u002Farticles",path:"\u002Farticles\u002Ftictactoe",extension:".md",updatedAt:"2021-07-03T20:07:49.910Z"}}],fetch:{},mutations:void 0}}("text","element","\n","p","icon-link","tictactoe","Tic Tac Toe","but-how","But how?","tic-tac-toe","a","true",-1,"span","icon")));